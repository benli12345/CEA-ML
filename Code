#R version 4.2.1
#Load VQI CEA data (available with approval through SVS PSO)
library(readr)
data <- read_csv("data.csv")

#Split data into train (70%) and test (30%) sets
library(caTools)
set.seed(123)
sample <- sample.split(data$outcome, SplitRatio = 0.7)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)

#Apply Random Over-Sample Examples (ROSE) for class balance on training set
library(ROSE)
train <- ROSE(outcome ~ ., data = train, N = 10000, seed = 123)$data

#Define predictors
library(dplyr)
predictors_train_preop <- train %>% select(REGIONID, CENTERID, PHYSICIANID, SURGYEAR, SURGMONTH, SURGWEEKDAY, PRIMARYINSURER, TRANSFER, SYMPTOMATIC, AGE, GENDER, ETHNICITY, RACE, BMI, PREOP_SMOKING, HTN, DIABETES, CAD, PRIOR_CHF, COPD, DIALYSIS, STRESS, LIVINGSTATUS, PREOP_AMBUL, HEMO_L, CREATININE_MOL, PRIOR_IPSICEA, PRIOR_IPSICAS, PRIOR_BYPASS, ANEURREP, PTASTENT, PREOP_ASA, PRIOR_MAJAMP, PREOP_P2Y, PREOP_STATIN, PREOP_BETABLOCKER, PREOP_ACE, PREOP_ANTICOAG, RADIATION, ANATOMHIGHRISK, IPSI_STENOSIS, URGENCY, ASACLASS)
predictors_test_preop <- test %>% select(REGIONID, CENTERID, PHYSICIANID, SURGYEAR, SURGMONTH, SURGWEEKDAY, PRIMARYINSURER, TRANSFER, SYMPTOMATIC, AGE, GENDER, ETHNICITY, RACE, BMI, PREOP_SMOKING, HTN, DIABETES, CAD, PRIOR_CHF, COPD, DIALYSIS, STRESS, LIVINGSTATUS, PREOP_AMBUL, HEMO_L, CREATININE_MOL, PRIOR_IPSICEA, PRIOR_IPSICAS, PRIOR_BYPASS, ANEURREP, PTASTENT, PREOP_ASA, PRIOR_MAJAMP, PREOP_P2Y, PREOP_STATIN, PREOP_BETABLOCKER, PREOP_ACE, PREOP_ANTICOAG, RADIATION, ANATOMHIGHRISK, IPSI_STENOSIS, URGENCY, ASACLASS)
predictors_train_intraop <- train %>% select(REGIONID, CENTERID, PHYSICIANID, SURGYEAR, SURGMONTH, SURGWEEKDAY, PRIMARYINSURER, TRANSFER, SYMPTOMATIC, AGE, GENDER, ETHNICITY, RACE, BMI, PREOP_SMOKING, HTN, DIABETES, CAD, PRIOR_CHF, COPD, DIALYSIS, STRESS, LIVINGSTATUS, PREOP_AMBUL, HEMO_L, CREATININE_MOL, PRIOR_IPSICEA, PRIOR_IPSICAS, PRIOR_BYPASS, ANEURREP, PTASTENT, PREOP_ASA, PRIOR_MAJAMP, PREOP_P2Y, PREOP_STATIN, PREOP_BETABLOCKER, PREOP_ACE, PREOP_ANTICOAG, RADIATION, ANATOMHIGHRISK, IPSI_STENOSIS, URGENCY, ASACLASS, ABX, ABX_START, ABX_STOP, ANESTHESIA, CEATYPE, PATCHTYPE, SHUNT, SKINPREP, DRAIN, HEPARIN, PROTAMINE, REEXPLORE, TOTALPROCTIME, EEG, STUMPPRESS, R_HIGHBPM, R_ARRIVALBPM, COMPLETION_DOPPLER, COMPLETION_DUPLEX, COMPLETION_ANGIO, MONOTHER)
predictors_test_intraop <- test %>% select(REGIONID, CENTERID, PHYSICIANID, SURGYEAR, SURGMONTH, SURGWEEKDAY, PRIMARYINSURER, TRANSFER, SYMPTOMATIC, AGE, GENDER, ETHNICITY, RACE, BMI, PREOP_SMOKING, HTN, DIABETES, CAD, PRIOR_CHF, COPD, DIALYSIS, STRESS, LIVINGSTATUS, PREOP_AMBUL, HEMO_L, CREATININE_MOL, PRIOR_IPSICEA, PRIOR_IPSICAS, PRIOR_BYPASS, ANEURREP, PTASTENT, PREOP_ASA, PRIOR_MAJAMP, PREOP_P2Y, PREOP_STATIN, PREOP_BETABLOCKER, PREOP_ACE, PREOP_ANTICOAG, RADIATION, ANATOMHIGHRISK, IPSI_STENOSIS, URGENCY, ASACLASS, ABX, ABX_START, ABX_STOP, ANESTHESIA, CEATYPE, PATCHTYPE, SHUNT, SKINPREP, DRAIN, HEPARIN, PROTAMINE, REEXPLORE, TOTALPROCTIME, EEG, STUMPPRESS, R_HIGHBPM, R_ARRIVALBPM, COMPLETION_DOPPLER, COMPLETION_DUPLEX, COMPLETION_ANGIO, MONOTHER)
predictors_train_postop <- train %>% select(REGIONID, CENTERID, PHYSICIANID, SURGYEAR, SURGMONTH, SURGWEEKDAY, PRIMARYINSURER, TRANSFER, SYMPTOMATIC, AGE, GENDER, ETHNICITY, RACE, BMI, PREOP_SMOKING, HTN, DIABETES, CAD, PRIOR_CHF, COPD, DIALYSIS, STRESS, LIVINGSTATUS, PREOP_AMBUL, HEMO_L, CREATININE_MOL, PRIOR_IPSICEA, PRIOR_IPSICAS, PRIOR_BYPASS, ANEURREP, PTASTENT, PREOP_ASA, PRIOR_MAJAMP, PREOP_P2Y, PREOP_STATIN, PREOP_BETABLOCKER, PREOP_ACE, PREOP_ANTICOAG, RADIATION, ANATOMHIGHRISK, IPSI_STENOSIS, URGENCY, ASACLASS, ABX, ABX_START, ABX_STOP, ANESTHESIA, CEATYPE, PATCHTYPE, SHUNT, SKINPREP, DRAIN, HEPARIN, PROTAMINE, REEXPLORE, TOTALPROCTIME, EEG, STUMPPRESS, R_HIGHBPM, R_ARRIVALBPM, COMPLETION_DOPPLER, COMPLETION_DUPLEX, COMPLETION_ANGIO, MONOTHER, CNI, POSTOP_MI, DYSRHYTHMIA, POSTOP_CHF, POSTOP_SSI, REPERFUSION, TOTAL_LOS)
predictors_test_postop <- test %>% select(REGIONID, CENTERID, PHYSICIANID, SURGYEAR, SURGMONTH, SURGWEEKDAY, PRIMARYINSURER, TRANSFER, SYMPTOMATIC, AGE, GENDER, ETHNICITY, RACE, BMI, PREOP_SMOKING, HTN, DIABETES, CAD, PRIOR_CHF, COPD, DIALYSIS, STRESS, LIVINGSTATUS, PREOP_AMBUL, HEMO_L, CREATININE_MOL, PRIOR_IPSICEA, PRIOR_IPSICAS, PRIOR_BYPASS, ANEURREP, PTASTENT, PREOP_ASA, PRIOR_MAJAMP, PREOP_P2Y, PREOP_STATIN, PREOP_BETABLOCKER, PREOP_ACE, PREOP_ANTICOAG, RADIATION, ANATOMHIGHRISK, IPSI_STENOSIS, URGENCY, ASACLASS, ABX, ABX_START, ABX_STOP, ANESTHESIA, CEATYPE, PATCHTYPE, SHUNT, SKINPREP, DRAIN, HEPARIN, PROTAMINE, REEXPLORE, TOTALPROCTIME, EEG, STUMPPRESS, R_HIGHBPM, R_ARRIVALBPM, COMPLETION_DOPPLER, COMPLETION_DUPLEX, COMPLETION_ANGIO, MONOTHER, CNI, POSTOP_MI, DYSRHYTHMIA, POSTOP_CHF, POSTOP_SSI, REPERFUSION, TOTAL_LOS)

#Train pre-op models
library(caret)
library(xgboost)
library(ranger)
library(naivebayes)
library(svm)
library(nnet)
train_control <- trainControl(method = "cv", number = 10) #10-fold cross-validation

#Train XGBoost
XGBgrid <- expand.grid(max_depth = c(3,5,7), nrounds = (1:10)*50, eta = 0.3, gamma = 0, subsample = 1, min_child_weight = 1, colsample_bytree = 0.6) #XGBoost grid search for hyperparameters
XGB <- train(x = as.matrix(predictors_train_preop), y = train$outcome, data = train, method = "xgbTree", metric = "ROC", trControl = train_control, tuneGrid = XGBgrid)

#Train random forest
RFgrid <- expand.grid(mtry = 2:4, splitrule = "gini", min.node.size = c(10,20))
RF <- train(x = predictors_train_preop, y = train$outcome, data = train, method = "ranger", metric = "ROC", trControl = train_control, tuneGrid = RFgrid)

#Train naive bayes
NBgrid <- expand.grid(usekernel = c(TRUE, FALSE), fL = 0:5, adjust = seq(0,5,by=1))
NB <- train(x = predictors_train_preop, y = as.factor(train$outcome), data = train, method = "naive_bayes", metric = "ROC", trControl = train_control, tuneGrid = NBgrid)

#Train support vector machine
SVMgrid <- expand.grid(C = c(0.01, 0.1))
SVM <- train(x = predictors_train_preop, y = train$outcome, data = train, method = "svmRadial", metric = "ROC", trControl = train_control, tuneGrid = SVMgrid)

#Train artificial neural network
NNETgrid <- expand.grid(size = seq(1,10,by=1), decay = seq(0.1,0.5,by=0.1))
NNET <- train(x = predictors_train_preop, y = train$outcome, data = train, method = "nnet", metric = "ROC", trControl = train_control, tuneGrid = NNETgrid)

#Train logistic regression
LRgrid <- expand.grid(parameter = c(0.001, 0.001, 0.1, 1, 10, 100, 1000))
LR <- train(x = predictors_train_preop, y = train$outcome, data = train, method = "glm", metric = "ROC", trControl = train_control, tuneGrid = LRgrid)

#Evaluate pre-op models on test set
XGB_pred <- predict(XGB, as.matrix(predictors_test_preop))
auc(test$outcome, XGB_pred)
ci.auc(test$outcome, XGB_pred)
XGB_pred_0.5 <- ifelse(XGB_pred > 0.5,1,0)
confusionMatrix(as.factor(test$outcome), as.factor(XGB_pred_0.5))

RF_pred <- predict(RF, predictors_test_preop)
auc(test$outcome, RF_pred)
ci.auc(test$outcome, RF_pred)
RF_pred_0.5 <- ifelse(RF_pred > 0.5,1,0)
confusionMatrix(as.factor(test$outcome), as.factor(RF_pred_0.5))

NB_pred <- predict(NB, predictors_test_preop)
auc(test$outcome, NB_pred)
ci.auc(test$outcome, NB_pred)
NB_pred_0.5 <- ifelse(NB_pred > 0.5,1,0)
confusionMatrix(as.factor(test$outcome), as.factor(NB_pred_0.5))

SVM_pred <- predict(SVM, predictors_test_preop)
auc(test$outcome, SVM_pred)
ci.auc(test$outcome, SVM_pred)
SVM_pred_0.5 <- ifelse(SVM_pred > 0.5,1,0)
confusionMatrix(as.factor(test$outcome), as.factor(SVM_pred_0.5))

NNET_pred <- predict(NNET, predictors_test_preop)
auc(test$outcome, NNET_pred)
ci.auc(test$outcome, NNET_pred)
NNET_pred_0.5 <- ifelse(NNET_pred > 0.5,1,0)
confusionMatrix(as.factor(test$outcome), as.factor(NNET_pred_0.5))

LR_pred <- predict(LR, predictors_test_preop)
auc(test$outcome, LR_pred)
ci.auc(test$outcome, LR_pred)
LR_pred_0.5 <- ifelse(LR_pred > 0.5,1,0)
confusionMatrix(as.factor(test$outcome), as.factor(LR_pred_0.5))
